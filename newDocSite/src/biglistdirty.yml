

  applyMinMax :
    short : Apply min/max HTML attributes
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      defval: ""
      dattype: ""
    long : |
      {% highlight js %}
      $(input).datebox('applyMinMax');
      {% endhighlight %}

      DateBox does not "watch" the min/max HTML attributes, other than on widget initialization.
      If you programmatically change them via JavaScript, you will need to run this function to
      make sure the DateBox "sees" them.

    i18n : *i18n
    overrideName : override


  beforeOpenCallbackArgs :
    short : Extra arguments to pass to open callback.
    modes : *modeAll
    cat : callback
    default : []
    type : Array
    dynamic : true
    long : |
      Note that 'this' in your function is the widget.  argument[0] is a return value object, this 
      starts on argument[1]

      For more information, please see: [Callbacks / Listeners]({{site.basesite}}doc/6-1-callback/).

    i18n : *i18n
    overrideName : override


  beforeOpenCallback :
    short : Callback function to run on control open
    modes : *modeAll
    cat : callback
    default : false
    type : Function
    dynamic : true
    long : |
      Option can be a function, or, a string reference to a function in the window object.  Additionally, 
      if this returns false, the DateBox control will NOT open.

      For more information, please see: [Callbacks / Listeners]({{site.basesite}}doc/6-1-callback/).


    modes : *modeAll

    i18n : *i18n
    overrideName : override


  clear :
    short : Listener - Datebox input has been cleared
    modes : *modeAll
    cat : event
      defval: ""
      etype: "Listener"
    long : |
      This trigger is received when the datebox control is cleared.

      {% highlight js %}
      $(input).bind('datebox', function (e, passed) { 
  if ( passed.method === 'clear' ) {
    alert('Datebox was cleared!');
  }
      });
      {% endhighlight %}

    i18n : *i18n
    overrideName : override



  close :
    short : Close the DateBox
      short2: Trigger - Close Datebox
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      etype: "Trigger"

    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Function
      </h3></div>
      <div class="panel-body">
      This function can be used to close the control.

      {% highlight js %}
      $(input).datebox('close');
      {% endhighlight %}
      </div></div>

      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Trigger
      </h3></div>
      <div class="panel-body">
      This trigger will close the DateBox control

      {% highlight js %}
      $(input).trigger('datebox', {'method':'close'})
      {% endhighlight %}
      </div></div>

    i18n : *i18n
    overrideName : override



  dateboxaftercreate :
    short : Trigger - DateBox enhancment done
    modes : *modeAll
    cat : event2
      etype: "Trigger"
    long : |

      Triggered when datebox enhancment completes.

      {% highlight js %}
      $(document).on('dateboxaftercreate', '.ui-page-active', function() {
  alert('A DateBox has been made');
      });
      {% endhighlight %}

    i18n : *i18n
    overrideName : override


  dateboxbeforecreate :
    short : Trigger - datebox loaded
    modes : *modeAll
    cat : event2
      etype: "Trigger"
    long : |
      Triggered on every page if datebox is loaded.  Pretty much useless.

      {% highlight js %}
      $(document).on('dateboxbeforecreate', '.ui-page-active', function() {
  alert('DateBox is loaded?');
      });
      {% endhighlight %}

    i18n : *i18n
    overrideName : override


  dateboxcreate :
    short : Trigger - DateBox Enhance
    modes : *modeAll
    cat : event2
      etype: "Trigger"
    long : |
      Triggered when a datebox is enhanced - but thrown prior to initialization.  
      Useful only to check if there *is* a datebox on the page.

      {% highlight js %}
      $(document).on('dateboxcreate', '.ui-page-active', function() {
  alert('A DateBox is being made');
      });
      {% endhighlight %}

    modes : *modeAll

    i18n : *i18n
    overrideName : override



  dateVisible :
    short : Return if selected calendar date is visible
    modes : *modeAll
    cat : public
      rettype: "JavaScript Date() Object"
    long : |
      Return if the selected calendar date is visible.  Only valid for calbox, otherwise it will
      always return true.

      {% highlight js %}
      $(input).datebox('dateVisible');
      {% endhighlight %}

    i18n : *i18n
    overrideName : override



  destroy :
    short : Destroy the datebox
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      etype: "Listener"
    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Function
      </h3></div>
      <div class="panel-body">
      This function will destroy the DateBox control and remove the enhancements it added.

      Note that the input will still be styled with textinput() [jqm only], so if you want back to original
      HTML from your source file, you'll need to destroy that as well.

      {% highlight js %}
      $(input).datebox('destroy');
      {% endhighlight %}

      </div></div>

    i18n : *i18n
    overrideName : override


  disable :
    short : Disable the DateBox
      short2: Listener - DateBox has been disabled
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      etype: "Listener"
    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Function
      </h3></div>
      <div class="panel-body">
      This function will disable the DateBox control.

      {% highlight js %}
      $(input).datebox('close');
      {% endhighlight %}

      </div></div>


      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Listener
      </h3></div>
      <div class="panel-body">
      This trigger is received when the datebox control is disabled

      {% highlight js %}
      $(input).bind('datebox', function (e, passed) { 
  if ( passed.method === 'disable' ) {
    alert('Datebox was disabled!');
  }
      });
      {% endhighlight %}
      </div></div>
    i18n : *i18n
    overrideName : override


  displayChange :
    short : Listener - Calendar Display Date has been changed
    modes : *modeAll
    cat : event
      etype: "Listener"
    long : |
      This trigger is received when the calendar display (CalBox) is changed - but only if the "selected" date is not in the visible natural month. (If the date is still "visible", but in the previous or next month, this event will still fire)

      This trigger *precedes* the {% api_doc offset %} event, however it is triggered in the same block of code.  It is *only* triggered if there is a saved selection.


      {% highlight js %}
      $(input).bind('datebox', function (e, passed) { 
  if ( passed.method === 'displayChange' ) {
    alert('New Date Shown: ' + passed.shownDate);
    alert('Date Selected: ' + passed.selectedDate);
    alert('Change Type: ' + passed.thisChange);
    alert('Change amount: ' + passed.thisChangeAmount);
  }
      });
      {% endhighlight %}

      ### Arguments Recieved

 - **shownDate** : JavaScript Date() object of the new date shown
 - **selectedDate** : JavaScript Date() object currently user-selected
 - **thisChange** : Field Changed
   - *y* - Year
   - *m* - Month
   - *d* - Date
   - *h* - Hour
   - *i* - Minute
   - *s* - Second
   - *a* - Meridiem
   - *p* - Special Case - offset changed by the picker controls (month/year)
 - **thisChangeAmount**: Amount of change, +/- (or, in the case of thisChange === "p", it will be null)
    modes : *modeAll

    i18n : *i18n
    overrideName : override


  doclear :
    short : Trigger -  Clear input element
    modes : *modeAll
    cat : event
      etype: "Trigger"

    long : |
      This trigger will clear the value of the original input

      {% highlight js %}
      $(input).trigger('datebox', {'method':'doclear'})
      {% endhighlight %}

    i18n : *i18n
    overrideName : override


  dooffset :
    short : Trigger -  Change the date
    modes : *modeAll
    cat : event
      etype: "Trigger"
    long : |
      This trigger will change the internal date of datebox.  Functionally identical 
      to hitting a +/- button in the control, or sliding/flipping a value

      {% highlight js %}
      $(input).trigger('datebox', {'method':'dooffset', 'amount': <INT amount>, 'type': <CHAR field>})
      {% endhighlight %}

      Required Arguments:

 - **INT amount** : Integer amount to offset, +/-
 - **CHAR field** : Date part to change:
   - *y* - Year
   - *m* - Month
   - *d* - Date
   - *h* - Hour
   - *i* - Minute
   - *s* - Second
   

    i18n : *i18n
    overrideName : override


  dorefresh :
    short : Trigger -  Refresh control
    modes : *modeAll
    cat : event
      etype: "Trigger"
    long : |
      This trigger will refresh the datebox control.  Functionally equivalent to the 
      public refresh function

      {% highlight js %}
      $(input).trigger('datebox', {'method':'dorefresh'})
      {% endhighlight %}

    i18n : *i18n
    overrideName : override


  doset :
    short : Trigger - Refresh input element
    modes : *modeAll
    cat : event
      etype: "Trigger"
    long : |
      This trigger will refresh / populate the value of the original input

      {% highlight js %}
      $(input).trigger('datebox', {'method':'doset'})
      {% endhighlight %}

    i18n : *i18n
    overrideName : override



  enable :
    short : Enable the datebox
      short2: Listener - Datebox has been enabled
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      etype: "Listener"
    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Function
      </h3></div>
      <div class="panel-body">

      This function will enable the datebox control.

      {% highlight js %}
      $(input).datebox('enable');
      {% endhighlight %}

      </div></div>

      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Listener
      </h3></div>
      <div class="panel-body">

      This trigger is received when the datebox control is enabled.

      {% highlight js %}
      $(input).bind('datebox', function (e, passed) { 
  if ( passed.method === 'enable' ) {
    alert('Datebox was enabled!');
  }
      });
      {% endhighlight %}

      </div></div>

    i18n : *i18n
    overrideName : override


  getLastDur :
    short : Get the last set duration
    modes : *modeAll
    cat : public
      rettype: "Integer"
    long : |
      Get the last set duration in a durationbox or durationflipbox as an integer.


      {% highlight js %}
      $(input).datebox('getLastDur');
      {% endhighlight %}
    modes : *modeAll

    i18n : *i18n
    overrideName : override


  getOption :
    short : Retrieve an option's value
    modes : *modeAll
    cat : public
      rettype: "Mixed"
    long : |
      This will return a specified options current value.

      {% highlight js %}
      $(input).datebox('getOption', <Option_Name>);
      {% endhighlight %}

      Option Name can be any datebox option.

    i18n : *i18n
    overrideName : override


  getTheDate :
    short : Return the current date object
    modes : *modeAll
    cat : public
      rettype: "JavaScript Date() Object"
    long : |
      Return the current date object for any date mode.

      {% highlight js %}
      $(input).datebox('getTheDate');
      {% endhighlight %}

    i18n : *i18n
    overrideName : override


  {} :
    short : Set an option
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
    long : |
      {% highlight js %}
      $(input).datebox(<option_name> : <new value>);
      $(input).datebox(<object>);
      {% endhighlight %}

      You can either send a key: value pair to set a single option, or an object of 
      multiple options.

    i18n : *i18n
    overrideName : override



  offset :
    short : Listener - Date has been changed
    modes : *modeAll
    cat : event
      etype: "Listener"
    long : |
      This trigger is received when the datebox control is changed.



            {% highlight js %}
            $(input).bind('datebox', function (e, passed) { 
        if ( passed.method === 'offset' ) {
          alert('New datet: ' + passed.newDate);
          alert('Field offset: ' + passed.type);
          alert('Offset amount: ' + passed.amount);
        }
            });
            {% endhighlight %}

            ### Arguments Recieved

       - **newDate** : JavaScript Date() object of the new date
       - **type** : Field Changed
         - *y* - Year
         - *m* - Month
         - *d* - Date
         - *h* - Hour
         - *i* - Minute
         - *s* - Second
         - *a* - Meridiem
       - **amount**: Amount of change, +/-
    modes : *modeAll

    i18n : *i18n
    overrideName : override


  


  open :
    short : Open the datebox
      short2: Trigger - Open Datebox
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      etype: "Trigger"
    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Function
      </h3></div>
      <div class="panel-body">
      This function can be used to close the control.

      {% highlight js %}
      $(input).datebox('open');
      {% endhighlight %}

      </div></div>

      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Trigger
      </h3></div>
      <div class="panel-body">
      This trigger will close the datebox control

      {% highlight js %}
      $(input).trigger('datebox', {'method':'open'})
      {% endhighlight %}

      </div></div>
    i18n : *i18n
    overrideName : override



  parseDate :
    short : Parse a string date to an object
    modes : *modeAll
    cat : public
      defval: ""
    type : String
      rettype: "JavaScript Date Object"
    long : |
      {% highlight js %}
      $(input).datebox('parseDate', <String format>, <String Date>);
      {% endhighlight %}

      This will use the DateBox formatter library to parse a string Date and return
      a JavaScript Date Object.

      For more information on date format variables, see: [Output Formats]({{site.basesite}}doc/3-3-output/)

    i18n : *i18n
    overrideName : override



  refresh :
    short : Refresh the DateBox
      short2: Listener - Datebox has been refreshed
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
      etype: "Trigger"
    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Function
      </h3></div>
      <div class="panel-body">
      This function can be used to refresh the control.

      {% highlight js %}
      $(input).datebox('refresh');
      {% endhighlight %}

      </div></div>



      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Listener
      </h3></div>
      <div class="panel-body">
      This trigger is fired when datebox has been refreshed.

      {% highlight js %}
      $(input).bind('datebox', function (e, passed) { 
  if ( passed.method === 'refresh' ) {
    alert('Datebox was refreshed!');
  }
      });
      {% endhighlight %}
      </div></div>
    i18n : *i18n
    overrideName : override



  set :
    short : Dual - Set the date
    modes : *modeAll
    cat : event
      etype: "Trigger and Listener"
    long : |
      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Trigger
      </h3></div>
      <div class="panel-body">

      This will set the date for the DateBox control.

      {% highlight js %}
      $(input).trigger('datebox', {'method':'set', 'value':&lt;STR Date>});
      {% endhighlight %}

      This is similar to {% api_doc setTheDate %}, however, this traditionally expects a 
      **formatted date string**, but will accept a Date() object.  It is far, far
      preferable to use the {% api_doc setTheDate %} function.

      </div></div>

      <div class="panel panel-default">
      <div class="panel-heading"><h3 class="panel-title">
      As a Listener
      </h3></div>
      <div class="panel-body">

      This is recieved when the DateBox is set.

      {% highlight js %}
      $(input).bind('datebox', function (e, passed) { 
  if ( passed.method === 'set' ) {
    alert('Formatted value is: ' + passed.value);
    alert('JavaScript Date object is: ' + passed.date);
  }
      });
      {% endhighlight %}

      Return Values:

 - **value** - Formatted date string
 - **date** - JavaScript Date() object

      </div></div>
    i18n : *i18n
    overrideName : override


  setTheDate :
    short : Set the date
    modes : *modeAll
    cat : public
      rettype: "jQuery Object (datebox input element)"
    long : |
      This will set the date, with two options of passed argument:

 - *Date Object* : JavaScript Date() object
 - *Formatted String* : String, formatted in the same format that DateBox is currently outputting.

      {% highlight js %}
      $(input).datebox('setTheDate', <Date Object>);
      $(input).datebox('setTheDate', <Formatted String>);
      {% endhighlight %}

    i18n : *i18n
    overrideName : override


