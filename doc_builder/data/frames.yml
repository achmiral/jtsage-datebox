sfs : 
  button :
    definition : "function( themeClass, iconClass, contents )"
    short      : Create a button
    args       :
      - themeClass : Button theme class
      - iconClass  : Icon class
      - contents   : Text of the button
    long       : |
      This should return a fully styled button as a jQuery object.

      iconClass can be set false (optional)

  buttonGroup : 
    definition : "function ( collapse )"
    short      : Create a button group
    args       :
      - collapse : Attempt to collapse multiple buttons to one line
    long       : |
      This is the container that holds a group of buttons.

      Supporting collapse is optional.

  baseInputWrap :
    definition : "function ( originalInput )"
    short      : Wrap the original input in a div
    args       :
      - originalInput : The original form input.
    long       : |
      This is the div that wraps the original input.  The open button is appened to it.

      It should return a div containing the input. (i.e. use jQuery.wrap() )

  baseInputButton :
    definition : "function ( iconClass, title )"
    short      : Make the open button
    args       :
      - iconClass : Class of the icon. Set from themeClass
      - title     : Hover text or title attribute for the button
    long       : |
      This should return a ___plain html___ (not jQuery Object) for a button
      to be added to the baseWrap() above.

  baseInputButtonFinder :
    definition : "function ( originalInputWrap )"
    short      : Find the open button
    args       :
      - originalInputWrap : The original input wrap from baseWrap()
    long       : |
      This should find the input button in the wrap - for event binding.

  baseInputNoButton :
    definition : "function ( originalInputWrap )"
    short      : Function to run if the open button isn't being used.
    args       :
      - originalInputWrap : The original input wrap from baseWrap()
    long       : |
      Used to add styling if needed to the wrapper in the event the button is not being used.

  focusInput :
    definition : "function ( originalInput )"
    short      : Function run when the input is focused
    args       :
      - originalInput : The original input
    long       : |
      Used to add styling to the input on focus.

  blurInput :
    definition : "function ( originalInput )"
    short      : Function run when the input is blurred
    args       :
      - originalInput : The original input
    long       : |
      Used to add / remove styling is needed to the input on focus.

  widgetHeader :
    definition : "function ( text, themeBar, themeIcon, iconClass )"
    short      : Build the widget header
    args       :
      - text      : Text contents of the header
      - themeBar  : Class for the header
      - themeIcon : Theme class for the close button
      - iconClass : Icon class for the close button
    long       : |
      This needs to return a ___plain HTML___ version of the widget header.

      A button is optional, but should you include one (or more), it needs to have the class
      "closer" for the close events to be added to it.

  intHeader :
    definition : "function ( text )"
    short      : Build an internal header
    args       :
      - text : Text contents of the header
    long       : |
      Returns a jQuery object containing an internal header.  The outer-most element should 
      include the "dbHeader" class.

  calHeader :
    definition : "function ( txt, firstBtnIcn, firstBtnCls, secondBtnIcn, secondBtnCls )"
    short      : Build the calendar header
    args       :
      - txt          : Text contents of the header
      - firstBtnIcn  : Icon class for first button (previous)
      - firstBtnCls  : Theme class for first button (previous)
      - secondBtnIcn : Icon class for second button (next)
      - secondBtnCls : Theme class for second button (next)
    long       : |
      This returns a jQuery object containing the header.  

      If you are adding previous / next buttons, they need the following classes:

       - __previous__ : dbCalPrev
       - __next__ : dbCalNext

  calGrid :
    definition : "function ()"
    short      : Make the calendar grid
    long       : Make the outermost grid for the calendar.  Typically a table.

  calRow :
    definition : "function ()"
    short      : Make a calendar row
    long       : Probably a TR

  calButton :
    definition : "function ( data, totalElements )"
    short      : Make a calendar button (grid item)
    args       :
      - data          : The data element.  See below
      - totalElements : Number of elements in a row.  7 or 8.
    long       : |
      Make a calendar button.

      totalElements if provided if you need to do width math.

      data contains:

       - __bad__         : True if the date is invalid
       - __good__        : True if the date is valid
       - __theme__       : Theme class that should be applied to the date
       - __displayText__ : Text for the date

      This should return a jQuery object.  The button should also have the class ___"dbEvent"___

  calNonButton :
    definition : "function ( text, header, totalElements )"
    short      : Make a calendar non-button grid element
    args       :
      - text          : Text to display
      - header        : Bool, this is a header element (bold it)
      - totalElements : Number of elements in a row.  7 or 8.
    long       : |
      This returns a similar object to ___calButton___, but it has no action attached to it.

  calPickers :
    definition : "function ( ranges )"
    short      : Build calendar month / year pickers
    args       :
      - ranges : Object of arrays.  See below.
    long       : |
      This is responsible for building the selects for months and years.

      __ranges__ contains two keys:

       - __month__ : Month array
       - __year__ : Year array

      Each of these are an array of arrays, the individual element is

       - __array[0]__ : Value for <option>
       - __array[1]__ : Text for <option>
       - __array[2]__ : Boolean, is the <option> selected?

      Consider using _stdSel() which makes a base select box.

  calDateList :
    definition : "function ( listLabel, list )"
    short      : Build quick pick list for calendar
    args       :
      listLabel : Lable for the pick list
      list : list array
    long       : |
      This is responsible for building the selects for months and years.

      __list__ is an array of arrays, the individual element is

       - __array[0]__ : Value for <option>
       - __array[1]__ : Text for <option>
       - __array[2]__ : Boolean, is the <option> selected?

      Consider using _stdSel() which makes a base select box.

  dboxContainer :
    definition : "function ()"
    short : DateBox container
    long : Return a div with classes or styles that will hold the DateBox

  dboxControl :
    definition : "function ( prevIcn, prevCls, nextIcn, nextCls, mainCls, label )"
    short      : Create the datebox mode +/input/- control
    args       :
      - prevIcn : Icon class for previous button
      - prevCls : Theme class for previous button
      - nextIcn : Icon class for next button
      - nextCls : Theme class for next button
      - mainCls : Class for wrapper
      - label : Label for input, if needed (optional)
    long       : |
      Return a control consisting of a stacked next button, label (if needed), input box, and 
      minus button.

      The wrapper should have __<mainCls>__ and must have the __dbBox__ class
      The next button must have the __dbBoxNext__ class
      The previous button must have the __dbBoxPrev__ class

      Best use case calls __button()__ to make the buttons.

  fboxContainer :
    definition : "function ( size )"
    short      : Build the flipbox control container
    args       :
      - size : Height of the control.
    long : This is the wrapper for all of the rollers for flipbox

  fboxDurLabels :
    definition : "function ( )"
    short      : Wrapper for flipbox labels
    long       : This is a wrapper for flipbox labels, if used.

  fboxDurLabel :
    definition : "function ( text, items )"
    short      : Build a label for flipbox
    args       :
      - text  : Text of the label
      - items : Total number of labels
    long       : |
      Return a label.  __items__ exists for width math, if nessesary.

  fboxRollerContain :
    definition : "function ()"
    short      : Container for each roller
    long       : Build the container for each roller.

  fboxRollerParent :
    definition : "function ()"
    short      : Opening of each roller
    long       : Opener of each roller.  This is usually a <ul>

  fboxRollerChild :
    definition : "function ( text, cls )"
    short      : Build the roller elements
    args       :
      - text : Text of item
      - cls  : Class of item
    long       : |
      Each list item.  Usually a <li>.

  fboxLens :
    definition : "function ()"
    short      : The "lens" of the flipbox
    long       : Build the lens element of the flipbox

