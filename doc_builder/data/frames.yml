sfs : 
  button :
    definition : "function( themeClass, iconClass, contents )"
    short      : Create a button
    args       :
      - themeClass : Button theme class
      - iconClass  : Icon class
      - contents   : Text of the button
    long       : |
      This should return a fully styled button as a jQuery object.

      iconClass can be set false (optional)

  buttonGroup : 
    definition : "function ( collapse )"
    short      : Create a button group
    args       :
      - collapse : Attempt to collapse multiple buttons to one line
    long       : |
      This is the container that holds a group of buttons.

      Supporting collapse is optional.

  baseInputWrap :
    definition : "function ( originalInput )"
    short      : Wrap the original input in a div
    args       :
      - originalInput : The original form input.
    long       : |
      This is the div that wraps the original input.  The open button is appened to it.

      It should return a div containing the input. (i.e. use jQuery.wrap() )

  baseInputButton :
    definition : "function ( iconClass, title )"
    short      : Make the open button
    args       :
      - iconClass : Class of the icon. Set from themeClass
      - title     : Hover text or title attribute for the button
    long       : |
      This should return a ___plain html___ (not jQuery Object) for a button
      to be added to the baseWrap() above.

  baseInputButtonFinder :
    definition : "function ( originalInputWrap )"
    short      : Find the open button
    args       :
      - originalInputWrap : The original input wrap from baseWrap()
    long       : |
      This should find the input button in the wrap - for event binding.

  baseInputNoButton :
    definition : "function ( originalInputWrap )"
    short      : Function to run if the open button isn't being used.
    args       :
      - originalInputWrap : The original input wrap from baseWrap()
    long       : |
      Used to add styling if needed to the wrapper in the event the button is not being used.

  focusInput :
    definition : "function ( originalInput )"
    short      : Function run when the input is focused
    args       :
      - originalInput : The original input
    long       : |
      Used to add styling to the input on focus.

  blurInput :
    definition : "function ( originalInput )"
    short      : Function run when the input is blurred
    args       :
      - originalInput : The original input
    long       : |
      Used to add / remove styling is needed to the input on focus.

  widgetHeader :
    definition : "function ( text, themeBar, themeIcon, iconClass )"
    short      : Build the widget header
    args       :
      - text      : Text contents of the header
      - themeBar  : Class for the header
      - themeIcon : Theme class for the close button
      - iconClass : Icon class for the close button
    long       : |
      This needs to return a ___plain HTML___ version of the widget header.

      A button is optional, but should you include one (or more), it needs to have the class
      "closer" for the close events to be added to it.

  intHeader :
    definition : "function ( text )"
    short      : Build an internal header
    args       :
      - text : Text contents of the header
    long       : |
      Returns a jQuery object containing an internal header.  The outer-most element should 
      include the "dbHeader" class.

  calHeader :
    definition : "function ( txt, firstBtnIcn, firstBtnCls, secondBtnIcn, secondBtnCls )"
    short      : Build the calendar header
    args       :
      - txt          : Text contents of the header
      - firstBtnIcn  : Icon class for first button (previous)
      - firstBtnCls  : Theme class for first button (previous)
      - secondBtnIcn : Icon class for second button (next)
      - secondBtnCls : Theme class for second button (next)
    long       : |
      This returns a jQuery object containing the header.  

      If you are adding previous / next buttons, they need the following classes:

       - __previous__ : dbCalPrev
       - __next__ : dbCalNext

  calGrid :
    definition : "function ()"
    short      : Make the calendar grid
    long       : Make the outermost grid for the calendar.  Typically a table.

  calRow :
    definition : "function ()"
    short      : Make a calenar row
    long       : Probably a TR

  calButton :
    definition : "function ( data, totalElements )"
    short      : Make a calendar button (grid item)
    args       :
      - data          : The data element.  See below
      - totalElements : Number of elements in a row.  7 or 8.
    long       : |
      Make a calendar button.

      totalElements if provided if you need to do width math.

      data contains:

       - __bad__         : True if the date is invalid
       - __good__        : True if the date is valid
       - __theme__       : Theme class that should be applied to the date
       - __displayText__ : Text for the date

      This should return a jQuery object.  The button should also have the class ___"dbEvent"___

  # calNonButton          : function ( text, header, totalElements ) {
  #   var style = ( totalElements !== undefined ?
  #       " style='width: " + ( 100 / totalElements ) + "%'" :
  #       ""
  #     ),
  #     cls = ( header ) ? " font-weight-bold" : "";

  #   return $("<td class='m-0 p-0 text-center" + cls + "'" + style + ">" + text + "</td>");
  # },
  # calPickers            : function ( ranges ) {
  #   var returnVal = "";

  #   returnVal += "<div class='row my-2 mx-1'>";

  #   returnVal += "<div class='col-sm-8 p-0 m-0'>";
  #   returnVal += this._stdSel( ranges.month, "dbCalPickMonth", "form-control" );
  #     returnVal += "</div>";

  #   returnVal += "<div class='col-sm-4 p-0 m-0'>";
  #   returnVal += this._stdSel( ranges.year, "dbCalPickYear", "form-control" );
  #     returnVal += "</div>";

  #   returnVal += "</div>";

  #   return $(returnVal);
  # },
  # calDateList           : function ( listLabel, list ) {
  #   var returnVal = "";

  #   list.unshift([false, listLabel, true]);

  #   returnVal += "<div class='row my-2 mx-1'>";
  #   returnVal += this._stdSel( list, "dbCalPickList", "form-control" );
  #   returnVal += "</div>";

  #   return $(returnVal);
  # },
  # dboxContainer         : function () {
  #   return $("<div class='d-flex p-1'>");
  # },
  # dboxControl           : function ( prevIcn, prevCls, nextIcn, nextCls, mainCls, label ) {
  #   var returnVal = "";

  #   returnVal += "<div class='btn-group-vertical flex-fill dbBox" + mainCls + "'>";

  #   returnVal += this.button( nextCls + " dbBoxNext" , nextIcn, "" );
  #   if ( label !== null ) {
  #     returnVal += "<div class='w-100 form-control rounded-0 p-0 text-center' " +
  #       "style='height:auto'>" + label + "</div>";
  #   }
  #   returnVal += "<input type='text' ";
  #   returnVal += "class='form-control form-control-sm text-center px-0 rounded-0'>";
  #   returnVal += this.button( prevCls + " dbBoxPrev" , prevIcn, "" );

  #   returnVal += "</div>";

  #   return $(returnVal);
  # },
  # fboxContainer         : function ( size ) {
  #   return $(
  #     "<div class='d-flex border-top border-bottom m-2' style='height: " + 
  #     size + 
  #     "; overflow: hidden'>"
  #   );
  # },
  # fboxDurLabels         : function ( ) {
  #   return $(
  #     "<div class='d-flex mx-2 mt-2' style='margin-bottom: -8px;'>"
  #   );
  # },
  # fboxDurLabel          : function ( text, items ) {
  #   return $( 
  #     "<div class='text-center' style='width: " + ( 100 / items ) + "%'>" + 
  #     text + 
  #     "</div>"
  #   );
  # },
  # fboxRollerContain     : function () {
  #   return $( "<div class='flex-fill'>" );
  # },
  # fboxRollerParent      : function () {
  #   return $( "<ul class='list-group'>" );
  # },
  # fboxRollerChild       : function ( text, cls ) {
  #   return $( 
  #     "<li class='list-group-item p-1 text-center list-group-item-" + cls + "'>" + 
  #     text + 
  #     "</li>"
  #   );
  # },
  # fboxLens              : function () {
  #   return $( "<div class='p-4 border border-dark shadow mx-1'>" );
  # }